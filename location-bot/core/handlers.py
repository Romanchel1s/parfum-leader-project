from aiogram import types, F
from aiogram.filters.command import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core.states import LocationStates
from utils.keyboard import *
from utils.location_handler import calculate_distance, Coordinates
from utils.constants import COORDINATES_ERROR
from utils.utils import get_next_10_days_formatted, get_user_id
from database.stores_db_connector import StoresDBConnector
from database.employees_db_connector import EmployeesDBConnector
from database.employee_attendance_db_connector import EmployeeAttendanceDBConnector
from datetime import datetime, timedelta, timezone
from utils import scheduler_handler
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, Bot

def register_handlers(dp: Dispatcher, bot: Bot, scheduler: AsyncIOScheduler, stores_db_connector:  StoresDBConnector, employees_db_connector: EmployeesDBConnector, employee_attendance_db_connector: EmployeeAttendanceDBConnector):
    # –°–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
    @dp.message(F.text == "üè¢ –°–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã")
    async def handle_change_work(message: types.Message, state: FSMContext):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã:",
                             reply_markup=create_location_keyboard())
        await state.set_state(LocationStates.set_workplace)


    # –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ
    @dp.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ")
    async def handle_check_work(message: types.Message, state: FSMContext):
        username = message.from_user.username

        status =next(iter(employees_db_connector.get_employee_next_dates(username).items()))[1]

        if status=="–†–∞–±–æ—Ç–∞—é":
            store_id = employees_db_connector.get_employee_workplace(username)
            coordinates = stores_db_connector.get_store_coordinates_by_id(store_id)
            store_lat, store_lon = coordinates["lat"], coordinates["lon"]

            await state.update_data(store_lat=store_lat, store_lon=store_lon)
            await message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ:",
                reply_markup=create_location_keyboard()
            )
            await state.set_state(LocationStates.check_on_work)
        else:
            await message.answer("–£ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π)", reply_markup=create_main_keyboard())



    # –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    @dp.message(F.text == "üì± –°–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    async def handle_change_phone(message: types.Message, state: FSMContext):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=create_phone_keyboard()
        )
        await state.set_state(LocationStates.change_phone)


    # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    @dp.message(F.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    async def handle_set_schedule(message: types.Message, state: FSMContext):
        username = message.from_user.username
        await create_dates_buttons(username, employees_db_connector, bot, state)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    @dp.callback_query(lambda c: c.data == "save_schedule")
    async def handle_save_schedule(callback_query: types.CallbackQuery, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        user_data = await state.get_data()
        sent_message_id = user_data.get('sent_message_id')

        if sent_message_id:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()

        # –û—Ç–≤–µ—Ç –Ω–∞ callback_query
        await callback_query.message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=create_main_keyboard())


    @dp.message(F.contact)
    async def contact_handler(message: types.Message, state: FSMContext):
        current_state = await state.get_state()

        phone_number = message.contact.phone_number
        username = message.from_user.username

        employees_db_connector.add_phone_number_to_user(username, phone_number)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if current_state == LocationStates.change_phone:
            await message.answer(f"–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω: {phone_number}", reply_markup=create_main_keyboard())
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=create_location_keyboard())
            await state.set_state(LocationStates.set_workplace)


    @dp.message(F.location)
    async def location_handler(message: types.Message, state: FSMContext):
        current_state = await state.get_state()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
        if current_state == LocationStates.set_workplace:
            user_lat = message.location.latitude
            user_lon = message.location.longitude

            nearest_stores = stores_db_connector.get_nearest_stores_for_user(user_lat, user_lon)
            buttons = []
            response_text = "–¢—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"

            for distance, store_id, name, lat, lon, city, line1 in nearest_stores:
                response_text += (f"üè¨ {name}\nüìç –ê–¥—Ä–µ—Å: {line1}, {city}\n"
                                  f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n\n")
                buttons.append(
                    [InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å: {name}", callback_data=f"select_store_{store_id}")])

            inline_kb = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(response_text, reply_markup=inline_kb)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
        elif current_state == LocationStates.check_on_work:
            data = await state.get_data()
            store_lat = data.get("store_lat")
            store_lon = data.get("store_lon")

            user_lat = message.location.latitude
            user_lon = message.location.longitude
            username = message.from_user.username

            store_id = employees_db_connector.get_employee_workplace(username)
            _, time_start, time_end, user_timezone = stores_db_connector.get_time_for_store(store_id).values()

            work_start_time = datetime.strptime(time_start, "%H:%M:%S").time()  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            work_end_time = datetime.strptime(time_end, "%H:%M:%S").time()  # –í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã
            timezone_offset = datetime.strptime(user_timezone, "%H:%M:%S").time()  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
            now_utc = datetime.now(timezone.utc)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º time –≤ timedelta
            offset_delta = timedelta(hours=timezone_offset.hour, minutes=timezone_offset.minute, seconds=timezone_offset.second)

            # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_now_time = (now_utc + offset_delta).time()

            # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É 20 –º–∏–Ω—É—Ç
            work_start_plus_20 = (datetime.combine(datetime.today(), work_start_time) + timedelta(minutes=4)).time()
            work_end_minus_20 = (datetime.combine(datetime.today(), work_end_time) - timedelta(minutes=4)).time()

            distance = calculate_distance(
                Coordinates([user_lat, user_lon]),
                Coordinates([store_lat, store_lon])
            )

            user_id = await get_user_id(message)

            was_present = False
            if distance <= COORDINATES_ERROR:
                was_present = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ª–æ–∂–∏–ª—Å—è –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ 20 –º–∏–Ω—É—Ç
            if work_start_time <= user_now_time <= work_start_plus_20:
                scheduler_handler.remove_work_job(scheduler, "start", user_id)
            if work_end_minus_20 <= user_now_time <= work_end_time:
                scheduler_handler.remove_work_job(scheduler, "end", user_id)

            employee_attendance_db_connector.add_attendance(user_id, datetime.now().strftime("%Y.%m.%d"), str(user_now_time), was_present)
            await message.answer("–í–∞—à–∞ –æ—Ç–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=create_main_keyboard())

        await state.clear()


    @dp.callback_query(F.data.startswith('select_store_'))
    async def process_store_selection(callback_query: types.CallbackQuery):
        store_id = int(callback_query.data.split('_')[-1])
        employees_db_connector.update_user_store_id(username=callback_query.from_user.username, store_id=store_id)
        scheduler_handler.update_jobs_for_user(callback_query.from_user.username, scheduler, employees_db_connector, stores_db_connector, employee_attendance_db_connector, bot)
        await callback_query.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–∞—à–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ {store_id}",
                                            reply_markup=create_main_keyboard())


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    @dp.callback_query(lambda c: c.data != 'save_schedule')
    async def handle_date_click(callback_query: types.CallbackQuery, state: FSMContext):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        username, selected_date, value = callback_query.data.split(":")

        nearest_days = employees_db_connector.get_employee_next_dates(username)
        if nearest_days[selected_date] == "–†–∞–±–æ—Ç–∞—é":
            nearest_days[selected_date] = "–í—ã—Ö–æ–¥–Ω–æ–π"
        else:
            nearest_days[selected_date] = "–†–∞–±–æ—Ç–∞—é"

        employees_db_connector.update_employee_next_dates(username, nearest_days)
        scheduler_handler.update_jobs_for_user(callback_query.from_user.username, scheduler, employees_db_connector, stores_db_connector, employee_attendance_db_connector, bot)

        user_data = await state.get_data()
        sent_message_id = user_data.get('sent_message_id')

        if sent_message_id:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()

        await create_dates_buttons(username, employees_db_connector, bot, state)

    @dp.message(Command("start"))
    async def start_command(message: types.Message):
        username = message.from_user.username
        if employees_db_connector.check_user_by_username(username):
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=create_main_keyboard())
        else:
            user_id = await get_user_id(message)
            employees_db_connector.add_user(username, user_id)

            keys = get_next_10_days_formatted()
            json = {key: "–†–∞–±–æ—Ç–∞—é" for key in keys}
            employees_db_connector.update_employee_next_dates(username, json)

            await message.answer(
                "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=create_phone_keyboard()
            )