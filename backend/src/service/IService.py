from abc import ABC, abstractmethod
from typing import TypeVar, Generic


T = TypeVar('T')


class IService(ABC, Generic[T]):
    """
    Абстрактный базовый класс для сервисов, реализующий интерфейс, который должны 
    реализовать все сервисы. Классы, наследующие этот интерфейс, обязаны реализовать 
    методы конструктора и execute.
    
    Параметры:
    - T: Тип, который будет возвращён методом execute.
    """
    @abstractmethod
    def __init__(self, *args):
        """
        Конструктор сервиса. Должен быть реализован в подклассах.
        
        Параметры:
        - args: Параметры для инициализации сервиса. Реализация зависит от конкретного сервиса.
        """
        raise NotImplementedError()
    
    @abstractmethod
    async def execute(*args) -> T:
        """
        Выполняет основную логику сервиса.
        
        Этот метод должен быть реализован в подклассах и должен описывать основную логику 
        сервиса. Он принимает аргументы, необходимые для выполнения, и возвращает результат 
        типа T.
        
        Параметры:
        - args: Аргументы, необходимые для выполнения логики сервиса.
        
        Возвращает:
        - Объект типа T, результат выполнения сервиса."
        """
        raise NotImplementedError()
